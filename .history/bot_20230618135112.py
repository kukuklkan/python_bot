#   I–º–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import telebot
from telebot import types
import json

#   –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞
TOKEN = '5665735947:AAG0MhcHkPhFxxYtmB1mbdrdHXXXKjpIH90'
bot = telebot.TeleBot(TOKEN)


#   –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ JSON —Ñ–∞–π–ª—É
with open('taryfs.json', 'r') as file:
    data = json.load(file)
    tarrifs = data['tariffs']['main']


#   –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def hello(message):
    user = message.from_user
    user_name = user.first_name 
    user_id = user.id
    profile_link = f'<a href="tg://user?id={user_id}">{user_name}</a>'
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    tariff = telebot.types.InlineKeyboardButton('üì≤–í–∏–±—ñ—Ä —Ç–∞—Ä–∏—Ñ—É', callback_data='tariff')
    web = telebot.types.InlineKeyboardButton('üåê–ù–∞—à —Å–∞–π—Ç', url='https://www.lifecell.ua/uk/')
    markup.add(tariff, web)
    bot.reply_to(message,  f"–í—ñ—Ç–∞—é, {profile_link}! \n–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", parse_mode='HTML', reply_markup=markup)

#   –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def calldack(call):
    msg_id = call.message.message_id
    user_name = call.from_user.first_name
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    profile_link = f'<a href="tg://user?id={user_id}">{user_name}</a>'
    if call.message:
        if call.data == 'tariff':
            markup = telebot.types.InlineKeyboardMarkup(row_width=1)
            default = telebot.types.InlineKeyboardButton('üì≤–ó–≤–∏—á–∞–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏', callback_data='default')
            handmade = telebot.types.InlineKeyboardButton('üñê–•–µ–Ω–¥–º–µ–π–¥', callback_data='handmade')
            markup.add(default, handmade)
            bot.send_message(chat_id, f'–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–∞—Ä–∏—Ñ—É.', reply_markup=markup)
        elif call.data == 'default':
            markup = telebot.types.InlineKeyboardMarkup(row_width=3)
            twenty = telebot.types.InlineKeyboardButton('2Ô∏è‚É£0Ô∏è‚É£ —Ç–∞ –±—ñ–ª—å—à–µ', callback_data='twenty')
            ten = telebot.types.InlineKeyboardButton('üîü —Ç–∞ –º–µ–Ω—à–µ', callback_data='ten')
            skip = telebot.types.InlineKeyboardButton('üö´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data='skip')
            markup.add(ten, twenty, skip)
            bot.send_message(chat_id, f'üåê–°–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ —Å—Ç—ñ–ª—å–Ω–∏–∫–æ–≤–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è?', reply_markup=markup)
        elif call.data == 'handmade':
            markup = telebot.types.InlineKeyboardMarkup(row_width=1)
            start_in_hand_made = telebot.types.InlineKeyboardButton('üöÄ–ü–æ—á–Ω–µ–º–æ —Å–∫–ª–∞–¥–∞—Ç–∏ –≤–∞—à–∏–π –ø–µ—Ä—Å–Ω–∞–ª—å–Ω–∏–π —Ç–∞—Ä–∏—Ñ!', callback_data='gigabytes_for_hand_made')
            markup.add(start_in_hand_made)
            bot.send_message(chat_id, f'–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∞ –≤–∞—à –≤–∏–±—ñ—Ä.', reply_markup=markup)
            with open('gigabytes.json', 'w') as gigabytes_json:
                info_dict = {'cost':0, 'gigabytes':0}
                json.dump(info_dict, gigabytes_json)
            with open('minutes.json', 'w') as gigabytes_json:
                info_dict = {'cost':0, 'gigabytes':0}
                json.dump(info_dict, gigabytes_json)
        # Buttons for Gigabytes
        elif call.data == 'gigabytes_for_hand_made':
            with open('gigabytes.json', 'w') as gigabytes_json:
                info_dict = {'cost':0, 'gigabytes':0}
                json.dump(info_dict, gigabytes_json)
            markup = telebot.types.InlineKeyboardMarkup(row_width=4)
            zero_gigabates = telebot.types.InlineKeyboardButton('0Ô∏è‚É£', callback_data='sub_result_zero')
            four_gigabates = telebot.types.InlineKeyboardButton('4Ô∏è‚É£', callback_data='sub_result_four')
            ten_gigabates = telebot.types.InlineKeyboardButton('üîü', callback_data='sub_result_ten')
            twenty_plus_gigabates = telebot.types.InlineKeyboardButton('2Ô∏è‚É£0Ô∏è‚É£+', callback_data='sub_result_twenty')
            markup.add(zero_gigabates, four_gigabates, ten_gigabates, twenty_plus_gigabates)
            bot.send_message(chat_id, f'–°–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ –≥—ñ–≥–∞–±–∞–π—Ç—ñ–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è?', reply_markup=markup)
        # Sub level in taking gigabytes
        elif call.data == 'sub_result_zero':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('gigabytes.json', 'w') as gigabytes_json:
                info_dict = {'cost':0, 'gigabytes':0}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='minutes_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='gigabytes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 0 –ì—ñ–≥–∞–±–∞–π—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        elif call.data == 'sub_result_four':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('gigabytes.json', 'w') as gigabytes_json:
                info_dict = {'cost':40, 'gigabytes':4}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='minutes_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='gigabytes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 4 –ì—ñ–≥–∞–±–∞–π—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        elif call.data == 'sub_result_ten':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('gigabytes.json', 'w') as gigabytes_json:
                info_dict = {'cost':45, 'gigabytes':10}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='minutes_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='gigabytes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 10 –ì—ñ–≥–∞–±–∞–π—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        elif call.data == 'sub_result_twenty':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('gigabytes.json', 'w') as gigabytes_json:
                info_dict = {'cost':105, 'gigabytes':20}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='minutes_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='gigabytes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 20+ –ì—ñ–≥–∞–±–∞–π—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        # Button for Minutes
        elif call.data == "minutes_for_hand_made":
            with open('minutes.json', 'w') as gigabytes_json:
                info_dict = {'cost':0, 'gigabytes':0}
                json.dump(info_dict, gigabytes_json)
            markup = telebot.types.InlineKeyboardMarkup(row_width=4)
            zero_minutes = telebot.types.InlineKeyboardButton('0Ô∏è‚É£', callback_data='sub_result_zero_minutes')
            hundred_minutes = telebot.types.InlineKeyboardButton('1Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£', callback_data='sub_result_hundred_minutes')
            two_hundred_minutes = telebot.types.InlineKeyboardButton('2Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£', callback_data='sub_result_twohundred_minutes')
            five_hundred_minutes = telebot.types.InlineKeyboardButton('5Ô∏è‚É£0Ô∏è‚É£0Ô∏è‚É£', callback_data='sub_result_fivehundred_minutes')
            markup.add(zero_minutes, hundred_minutes, two_hundred_minutes, five_hundred_minutes)
            bot.send_message(chat_id, f'–°–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä–µ–±—É—î—Ç–µ —Ö–≤–∏–ª–∏–Ω –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è?', reply_markup=markup)
        # Sub level of taking minutes
        elif call.data == 'sub_result_zero_minutes':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('minutes.json', 'w') as gigabytes_json:
                info_dict = {'cost':0, 'minutes':0}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='taryf_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='minutes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 0 –•–≤–∏–ª–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        elif call.data == 'sub_result_hundred_minutes':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('minutes.json', 'w') as gigabytes_json:
                info_dict = {'cost':30, 'minutes':100}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='taryf_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='minutes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 100 –•–≤–∏–ª–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        elif call.data == 'sub_result_twohundred_minutes':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('minutes.json', 'w') as gigabytes_json:
                info_dict = {'cost':50, 'minutes':200}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='taryf_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='minutes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 200 –•–≤–∏–ª–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        elif call.data == 'sub_result_fivehundred_minutes':
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            with open('minutes.json', 'w') as gigabytes_json:
                info_dict = {'cost':140, 'minutes':500}
                json.dump(info_dict, gigabytes_json)
            sub_result = telebot.types.InlineKeyboardButton('üöÄ–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ', callback_data='taryf_for_hand_made')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='minutes_for_hand_made')
            markup.add(sub_result, back)
            bot.send_message(chat_id, f'–ë—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ 500 –•–≤–∏–ª–∏–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è!', reply_markup=markup)
        # Result of choosing
        if call.data == 'taryf_for_hand_made':
            with open('minutes.json', 'r') as minutes_json:
                minutes_cost = json.load(minutes_json)
            with open('gigabytes.json', 'r') as gigabytes_json:
                gigabytes_cost = json.load(gigabytes_json)
            result_in_gigabytes = gigabytes_cost['gigabytes']
            result_in_minutes = minutes_cost['minutes']
            result_in_cost = gigabytes_cost['cost'] + minutes_cost['cost'] + 120
            markup = telebot.types.InlineKeyboardMarkup(row_width=2)
            change_taryf = telebot.types.InlineKeyboardButton('‚ôªÔ∏è–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω–Ω—ñ —Ç–∞—Ä–∏—Ñ—É', callback_data='handmade')
            back = telebot.types.InlineKeyboardButton('üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='tariff')
            markup.add(change_taryf, back)
            bot.send_message(chat_id, f'–¢–∞—Ä–∏—Ñ —è–∫–∏–π –≤–∏ –∑—ñ–±—Ä–∞–ª–∏:\n–ì—ñ–≥–∞–±–∞–π—Ç–∏: {result_in_gigabytes}\n–•–≤–∏–ª–∏–Ω–∏: {result_in_minutes}\n–¶—ñ–Ω–∞ –≤–∞—à–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É: {result_in_cost}–≥—Ä–Ω.\n–î–ª—è –∑–º—ñ–Ω–∏ —Ç–∞—Ä–∏—Ñ—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ (–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω–Ω—ñ —Ç–∞—Ä–∏—Ñ—É) –∞–±–æ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ—É –∑ –Ω–∞—è–≤–Ω–∏—Ö –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å (–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥).', reply_markup = markup)
        elif call.data == 'nine':
            filtered_tariffs = [tariff for tariff in tariffs if tariff[list(tariff.keys())[0]]['gigabytes'] >= 9]
        elif call.data == 'ten':
            filtered_tariffs = [tariff for tariff in tariffs if tariff[list(tariff.keys())[0]]['gigabytes'] >= 10]






bot.infinity_polling()